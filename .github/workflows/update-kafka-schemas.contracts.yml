name: Upload Schemas

permissions:
  contents: write
  packages: read

on:
  workflow_run:
    workflows: ["Publish ECK1.Contracts"] 
    types:
      - completed
  push:
    branches: [ "main" ]
    paths:
      - '.github/workflows/update-kafka-schemas.contracts.yml'
      - '.github/workflows/actions/run-generator/action.yml'
      - '.github/scripts/update-sln.ps1'
      - '.github/scripts/run-schema-generator.ps1'

jobs:
  generate-schemas:
    if: ${{ github.event_name == 'push' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      assembly-path: ${{ steps.get-assembly-path.outputs.assembly-path }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      
      - name: Configure NuGet
        run: |
          mkdir -p ~/.nuget/NuGet
          cat > ~/.nuget/NuGet/NuGet.Config <<EOF
          <configuration>
            <packageSources>
              <add key="github" value="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" />
            </packageSources>
            <packageSourceCredentials>
              <github>
                <add key="Username" value="${{ github.actor }}" />
                <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
              </github>
            </packageSourceCredentials>
          </configuration>
          EOF

      - name: Download latest NuGet package
        id: get-assembly-path
        shell: bash
        run: |
          mkdir -p /tmp/temp-project
          cd /tmp/temp-project
          dotnet new classlib -n TempProject -f net8.0
          cd TempProject

          dotnet add package ECK1.Contracts --source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json"

          dotnet restore

          DLL_PATH=$(find ~/.nuget/packages/eck1.contracts -type f -name "ECK1.Contracts.dll" | sort -r | head -n 1)
          echo "Found DLL at $DLL_PATH"

          echo "assembly-path=$DLL_PATH" >> $GITHUB_OUTPUT

      - name: Move current schemas
        run: |
          mkdir -p /tmp/schema-backup
          if [ -d "src/_SolutionItems/SchemaRegistry" ]; then
            mv src/_SolutionItems/SchemaRegistry/* /tmp/schema-backup/
          fi

      - name: Run generator
        uses: ./.github/workflows/actions/run-generator
        with:
          assembly-path: ${{ needs.prepare.outputs.assembly-path }}
          solution-path: src/ECK1.sln
          schema-root: src/_SolutionItems/SchemaRegistry

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --staged --quiet || git commit -m "Update kafka schemas"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #
      # - name: Upload schemas to Kafka Schema Registry
      #   env:
      #     SCHEMA_REGISTRY_URL: ${{ secrets.SCHEMA_REGISTRY_URL }}
      #     SCHEMA_REGISTRY_USER: ${{ secrets.SCHEMA_REGISTRY_USER }}
      #     SCHEMA_REGISTRY_PASS: ${{ secrets.SCHEMA_REGISTRY_PASS }}
      #   run: |
      #     for f in _SolutionItems/SchemaRegistry/*; do
      #       echo "Uploading $f"
      #       curl -s -X POST \
      #         -H "Content-Type: application/vnd.schemaregistry.v1+json" \
      #         --data @"$f" \
      #         "$SCHEMA_REGISTRY_URL/subjects/$(basename $f .json)/versions" \
      #         -u "$SCHEMA_REGISTRY_USER:$SCHEMA_REGISTRY_PASS"
      #     done